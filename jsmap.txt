 const beginnerRenderer = () => (
    <TreeView
      aria-label="controlled"
      defaultCollapseIcon={<ExpandMoreIcon />}
      defaultExpandIcon={<ChevronRightIcon />}
      expanded={defaultOpen}
      selected={selectedTaskKey}
      onNodeToggle={handleToggle}
      onNodeSelect={handleSelect}
    >
      <TreeItem
        nodeId="1"
        onClick={() => {
          setCurrentTask("comB");
        }}
        label={
          <div className="flex flex-row justify-between">
            <h6 className="text-2xl font-serif text-center">
              1. Beginner{" "}
              {comB ? (
                <FontAwesomeIcon
                  icon={faCheck}
                  style={{ color: "green", fontSize: "15px" }}
                />
              ) : (
                ""
              )}
            </h6>
            <small
              className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
              onClick={() => alert("Edit button working")}
            >
              Edit
            </small>
          </div>
        }
      >
        <TreeItem
          nodeId="1100"
          onClick={() => {
            setCurrentTask("comEng1");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              1. English {taskComMark("comEng1")}
            </h6>
          }
        >
          <TreeItem
            nodeId="110100"
            onClick={() => {
              setCurrentTask("e110100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Reading {taskComMark("e110100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="110200"
            onClick={() => {
              setCurrentTask("e110200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Listening {taskComMark("e110200")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="110300"
            onClick={() => {
              setCurrentTask("e110300");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Writing {taskComMark("e110300")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="110400"
            onClick={() => {
              setCurrentTask("e110400");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Speaking {taskComMark("e110400")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="1200"
          onClick={() => {
            setCurrentTask("comAgile1");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              2. Agile {taskComMark("comAgile1")}
            </h6>
          }
        >
          <TreeItem
            nodeId="120100"
            onClick={() => {
              setCurrentTask("a120100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. What is agile? {taskComMark("a120100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="120200"
            onClick={() => {
              setCurrentTask("a120200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. What is Jira? {taskComMark("a120200")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="120300"
            onClick={() => {
              setCurrentTask("a120300");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Create account in Jira {taskComMark("a120300")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="1300"
          onClick={() => {
            setCurrentTask("comGit1");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              3. Git {taskComMark("comGit1")}
            </h6>
          }
        >
          <TreeItem
            nodeId="130100"
            onClick={() => {
              setCurrentTask("g130100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Installation and Configuration {taskComMark("g130100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130200"
            onClick={() => {
              setCurrentTask("g130200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Create repository {taskComMark("g130200")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130300"
            onClick={() => {
              setCurrentTask("g130300");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Git Clone {taskComMark("g130300")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130400"
            onClick={() => {
              setCurrentTask("g130400");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Git Add {taskComMark("g130400")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130500"
            onClick={() => {
              setCurrentTask("g130500");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                5. Git Commit {taskComMark("g130500")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130600"
            onClick={() => {
              setCurrentTask("g130600");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                6. Git Push {taskComMark("g130600")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="130700"
            onClick={() => {
              setCurrentTask("g130700");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                7. Git Pull {taskComMark("g130700")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="1400"
          onClick={() => {
            setCurrentTask("comChoice");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              4. Choices {taskComMark("comChoice")}
            </h6>
          }
        >
          <TreeItem
            nodeId="140100"
            onClick={() => {
              setCurrentTask("programLang");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Programming Language {taskComMark("programLang")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="140200"
            onClick={() => {
              setCurrentTask("courseLang");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Course Language {taskComMark("courseLang")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="1500"
          onClick={() => {
            setCurrentTask("comProgram1");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              5. Programming {taskComMark("comProgram1")}
            </h6>
          }
        >
          {programLang === "py" ? (
            <TreeItem
              nodeId="150200"
              onClick={() => {
                setCurrentTask("comPy1");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  1. Python {taskComMark("comPy1")}
                </h6>
              }
            >
              <TreeItem
                nodeId="150201"
                onClick={() => {
                  setCurrentTask("py150201");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. Youtube Hindi Course {taskComMark("py150201")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150202"
                onClick={() => {
                  setCurrentTask("py150202");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    2. Youtube English Course {taskComMark("py150202")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150203"
                onClick={() => {
                  setCurrentTask("py150203");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    3. Data Types {taskComMark("py150203")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150204"
                onClick={() => {
                  setCurrentTask("py150204");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    4. Variables {taskComMark("py150204")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150205"
                onClick={() => {
                  setCurrentTask("py150205");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    5. Booleans {taskComMark("py150205")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150206"
                onClick={() => {
                  setCurrentTask("py150206");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    6. Strings {taskComMark("py150206")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150207"
                onClick={() => {
                  setCurrentTask("py150207");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    7. Operators {taskComMark("py150207")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150208"
                onClick={() => {
                  setCurrentTask("py150208");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    8. If/Else Conditions {taskComMark("py150208")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150209"
                onClick={() => {
                  setCurrentTask("py150209");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    9. Lists {taskComMark("py150209")}
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="150210"
                onClick={() => {
                  setCurrentTask("py150210");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    10. Dictionary {taskComMark("py150210")}
                  </h6>
                }
              ></TreeItem>
            </TreeItem>
          ) : (
            <TreeItem
              nodeId="150100"
              onClick={() => {
                setCurrentTask("comProgram1");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  1. JavaScript {taskComMark("comJs1")}
                </h6>
              }
            >
              <TreeItem
                nodeId="150101"
                onClick={() => {
                  setCurrentTask("js150101");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. FreeCodeCamp Account Setup {taskComMark("js150101")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150102"
                onClick={() => {
                  setCurrentTask("js150102");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    2. FreeCodeCamp Course {taskComMark("js150102")}
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="150103"
                onClick={() => {
                  setCurrentTask("js150103");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    3. Youtube Hindi Course {taskComMark("js150103")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150104"
                onClick={() => {
                  setCurrentTask("js150104");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    4. Data Types {taskComMark("js150104")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150105"
                onClick={() => {
                  setCurrentTask("js150105");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    5. Variables {taskComMark("js150105")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150106"
                onClick={() => {
                  setCurrentTask("js150106");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    6. Strings {taskComMark("js150106")}
                  </h6>
                }
              ></TreeItem>{" "}
              <TreeItem
                nodeId="150107"
                onClick={() => {
                  setCurrentTask("js150107");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    7. Operators {taskComMark("js150107")}
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="150108"
                onClick={() => {
                  setCurrentTask("js150108");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    8. If/else Condtions {taskComMark("js150108")}
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="150109"
                onClick={() => {
                  setCurrentTask("js150109");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    9. Arrays {taskComMark("js150109")}
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="150110"
                onClick={() => {
                  setCurrentTask("js150110");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    10. Objects {taskComMark("js150110")}
                  </h6>
                }
              ></TreeItem>
            </TreeItem>
          )}
        </TreeItem>
      </TreeItem>
    </TreeView>
  );

  const ibackendRenderer = () => (
    <>
      <TreeItem
        nodeId="270100"
        label={<h6 className="text-2xl font-serif ">1. Database</h6>}
      >
        <TreeItem
          nodeId="27010101"
          onClick={() => {
            setCurrentTask("b27010101");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              1. Introduction and Installation
            </h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="27010102"
          onClick={() => {
            setCurrentTask("b27010102");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              2. Creating and Managing Databases
            </h6>
          }
        ></TreeItem>
      </TreeItem>
      {programLang === "py" ? (
        <TreeItem
          nodeId="270200"
          label={<h6 className="text-2xl font-serif ">2. FastAPI</h6>}
        >
          <TreeItem
            nodeId="27020100"
            onClick={() => {
              setCurrentTask("b27020100");
            }}
            label={<h6 className="text-2xl font-serif ">1. Courses</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="27020101"
            onClick={() => {
              setCurrentTask("b27020101");
            }}
            label={<h6 className="text-2xl font-serif ">2. Basics of API</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="27020102"
            onClick={() => {
              setCurrentTask("b27020102");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Query Parameters and Path Parameters
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="27020103"
            onClick={() => {
              setCurrentTask("b27020103");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Data Models and Pydantic
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="27020104"
            onClick={() => {
              setCurrentTask("b27020104");
            }}
            label={<h6 className="text-2xl font-serif ">5. Basic CRUD</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="27020105"
            onClick={() => {
              setCurrentTask("b27020105");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                6. Error Handling and Exception Handling
              </h6>
            }
          ></TreeItem>
        </TreeItem>
      ) : (
        <>
          <TreeItem
            nodeId="270300"
            label={<h6 className="text-2xl font-serif ">2. NodeJS</h6>}
          >
            <TreeItem
              nodeId="27030101"
              onClick={() => {
                setCurrentTask("b27030101");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  1. Introduction to Node.js and its architecture
                </h6>
              }
            ></TreeItem>
            <TreeItem
              nodeId="27030102"
              onClick={() => {
                setCurrentTask("b27030102");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  2. Understanding Node.js modules
                </h6>
              }
            ></TreeItem>
            <TreeItem
              nodeId="27030103"
              onClick={() => {
                setCurrentTask("b27030103");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  3. Node.js file system and streams
                </h6>
              }
            ></TreeItem>
            <TreeItem
              nodeId="27030104"
              onClick={() => {
                setCurrentTask("b27030104");
              }}
              label={
                <h6 className="text-2xl font-serif ">
                  4. Asynchronous programming with Node.js
                </h6>
              }
            ></TreeItem>{" "}
            <TreeItem
              nodeId="27030105"
              onClick={() => {
                setCurrentTask("b27030105");
              }}
              label={
                <h6 className="text-2xl font-serif ">5. Node.js and HTTP</h6>
              }
            ></TreeItem>
          </TreeItem>
        </>
      )}
    </>
  );

  const ifrontendRenderer = () => (
    <>
      <TreeItem
        nodeId="280100"
        onClick={() => {
          setCurrentTask("f280100");
        }}
        label={<h6 className="text-2xl font-serif ">1. FreeCodeCamp Course</h6>}
      ></TreeItem>
      <TreeItem
        nodeId="280101"
        label={<h6 className="text-2xl font-serif ">2. HTML</h6>}
      >
        <TreeItem
          nodeId="28010100"
          onClick={() => {
            setCurrentTask("f28010100");
          }}
          label={<h6 className="text-2xl font-serif ">1. Courses</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010101"
          onClick={() => {
            setCurrentTask("f28010101");
          }}
          label={
            <h6 className="text-2xl font-serif ">2. Introduction to HTML</h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010102"
          onClick={() => {
            setCurrentTask("f28010102");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              3. Text Formatting and Links
            </h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010103"
          onClick={() => {
            setCurrentTask("f28010103");
          }}
          label={
            <h6 className="text-2xl font-serif ">4. Images and Multimedia</h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010104"
          onClick={() => {
            setCurrentTask("f28010104");
          }}
          label={<h6 className="text-2xl font-serif ">5. Lists and Tables</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010105"
          onClick={() => {
            setCurrentTask("f28010105");
          }}
          label={<h6 className="text-2xl font-serif ">6. Forms</h6>}
        ></TreeItem>
      </TreeItem>
      <TreeItem
        nodeId="280102"
        label={<h6 className="text-2xl font-serif ">3. CSS</h6>}
      >
        <TreeItem
          nodeId="28010200"
          onClick={() => {
            setCurrentTask("f28010200");
          }}
          label={<h6 className="text-2xl font-serif ">1. Video Course</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010201"
          onClick={() => {
            setCurrentTask("f28010201");
          }}
          label={
            <h6 className="text-2xl font-serif ">2. Introduction to CSS</h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010202"
          onClick={() => {
            setCurrentTask("f28010202");
          }}
          label={<h6 className="text-2xl font-serif ">3. CSS Box Model</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010203"
          onClick={() => {
            setCurrentTask("f28010203");
          }}
          label={<h6 className="text-2xl font-serif ">4. CSS Selectors</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010204"
          onClick={() => {
            setCurrentTask("f28010204");
          }}
          label={<h6 className="text-2xl font-serif ">5. CSS Layout</h6>}
        ></TreeItem>
        {/* <TreeItem
          nodeId="28010205"
          onClick={() => {
            setCurrentTask("f28010205");
          }}
          label={
            <h6 className="text-2xl font-serif ">6. Responsive Web Design</h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010206"
          onClick={() => {
            setCurrentTask("f28010207");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              8. CSS Animations and Transitions
            </h6>
          }
        ></TreeItem> */}
      </TreeItem>
      {programLang === "py" ? (
        <TreeItem
          nodeId="280103"
          label={<h6 className="text-2xl font-serif ">4. JavaScript</h6>}
        >
          <TreeItem
            nodeId="28010301"
            onClick={() => {
              setCurrentTask("js28010301");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Youtube Hindi Course {taskComMark("js28010301")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010302"
            onClick={() => {
              setCurrentTask("js28010302");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Data Types {taskComMark("js28010302")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010303"
            onClick={() => {
              setCurrentTask("js28010303");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Variables {taskComMark("js28010303")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010304"
            onClick={() => {
              setCurrentTask("js28010304");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Strings {taskComMark("js28010304")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010305"
            onClick={() => {
              setCurrentTask("js28010305");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                5. Operators {taskComMark("js28010305")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010306"
            onClick={() => {
              setCurrentTask("js28010306");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                6. If/else Condtions {taskComMark("js28010306")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010307"
            onClick={() => {
              setCurrentTask("js28010307");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                7. Arrays {taskComMark("js28010307")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010308"
            onClick={() => {
              setCurrentTask("js28010308");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                8. Objects {taskComMark("js28010308")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010309"
            onClick={() => {
              setCurrentTask("js28010309");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                9. Control Flow and Conditional Statements
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="28010310"
            onClick={() => {
              setCurrentTask("js28010310");
            }}
            label={<h6 className="text-2xl font-serif ">10. For Loops</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="28010311"
            onClick={() => {
              setCurrentTask("js28010311");
            }}
            label={<h6 className="text-2xl font-serif ">11. While Loops</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="28010312"
            onClick={() => {
              setCurrentTask("js28010312");
            }}
            label={<h6 className="text-2xl font-serif ">12. Functions</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="28010313"
            onClick={() => {
              setCurrentTask("js28010313");
            }}
            label={
              <h6 className="text-2xl font-serif ">13. Exception Handling</h6>
            }
          ></TreeItem>
        </TreeItem>
      ) : (
        ""
      )}
      <TreeItem
        nodeId="280104"
        label={
          <h6 className="text-2xl font-serif ">
            {programLang === "py" ? "5. " : "4. "}ReactJs
          </h6>
        }
      >
        <TreeItem
          nodeId="28010400"
          onClick={() => {
            setCurrentTask("r28010400");
          }}
          label={<h6 className="text-2xl font-serif ">1. Video Course</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010401"
          onClick={() => {
            setCurrentTask("r28010401");
          }}
          label={
            <h6 className="text-2xl font-serif ">2. FreeCodeCamp Course</h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010402"
          onClick={() => {
            setCurrentTask("r28010402");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              3. Introduction to ReactJS, JSX
            </h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010403"
          onClick={() => {
            setCurrentTask("r28010403");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              4. Components and Rendering
            </h6>
          }
        ></TreeItem>
        <TreeItem
          nodeId="28010404"
          onClick={() => {
            setCurrentTask("r28010404");
          }}
          label={<h6 className="text-2xl font-serif "> 5. State</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010405"
          onClick={() => {
            setCurrentTask("r28010405");
          }}
          label={<h6 className="text-2xl font-serif ">6. Events </h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010406"
          onClick={() => {
            setCurrentTask("r28010406");
          }}
          label={<h6 className="text-2xl font-serif ">7. Basic React Hooks</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010407"
          onClick={() => {
            setCurrentTask("r28010407");
          }}
          label={<h6 className="text-2xl font-serif ">8. React Router</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010408"
          onClick={() => {
            setCurrentTask("r28010408");
          }}
          label={<h6 className="text-2xl font-serif ">9. CSS Module</h6>}
        ></TreeItem>
        <TreeItem
          nodeId="28010409"
          onClick={() => {
            setCurrentTask("r28010409");
          }}
          label={<h6 className="text-2xl font-serif ">10. API Calls</h6>}
        ></TreeItem>
      </TreeItem>
    </>
  );

  const abackendRenderer = () => {
    if (programLang === "py") {
      return (
        <TreeItem
          nodeId="350100"
          label={<h6 className="text-2xl font-serif ">1. FastAPI</h6>}
        >
          <TreeItem
            nodeId="35010100"
            onClick={() => {
              setCurrentTask("b35010100");
            }}
            label={
              <h6 className="text-2xl font-serif ">1. Data Persistence</h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="35010101"
            onClick={() => {
              setCurrentTask("b35010101");
            }}
            label={<h6 className="text-2xl font-serif ">2. CRUD Operations</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="35010102"
            onClick={() => {
              setCurrentTask("b35010102");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Authentication and Authorization
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="35010103"
            onClick={() => {
              setCurrentTask("b35010103");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Advanced Request Handling
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="35010104"
            onClick={() => {
              setCurrentTask("b35010104");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                5. Integrating with other APIs
              </h6>
            }
          ></TreeItem>
        </TreeItem>
      );
    } else {
      return (
        <TreeItem
          nodeId="270400"
          label={<h6 className="text-2xl font-serif ">3. ExpressJS</h6>}
        >
          {" "}
          <TreeItem
            nodeId="27040101"
            label={<h6 className="text-2xl font-serif ">1. Basics</h6>}
          ></TreeItem>{" "}
          <TreeItem
            nodeId="27040102"
            label={<h6 className="text-2xl font-serif ">2. Middleware </h6>}
          ></TreeItem>
          <TreeItem
            nodeId="27040103"
            label={<h6 className="text-2xl font-serif ">3. Routing </h6>}
          ></TreeItem>
          <TreeItem
            nodeId="27040104"
            label={
              <h6 className="text-2xl font-serif ">
                4. Working with databases
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="27040105"
            label={
              <h6 className="text-2xl font-serif ">5. RESTful API design</h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="27040106"
            label={
              <h6 className="text-2xl font-serif ">
                6. Authentication and security
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="27040107"
            label={
              <h6 className="text-2xl font-serif ">7. CORS, Dotenv, Morgan</h6>
            }
          ></TreeItem>
        </TreeItem>
      );
    }
  };

  const afrontendRenderer = () => (
    <TreeItem
      nodeId="360100"
      label={<h6 className="text-2xl font-serif ">1. ReactJs</h6>}
    >
      {" "}
      <TreeItem
        nodeId="36010100"
        onClick={() => {
          setCurrentTask("r36010100");
        }}
        label={<h6 className="text-2xl font-serif ">1. Props vs State</h6>}
      ></TreeItem>
      <TreeItem
        nodeId="36010101"
        onClick={() => {
          setCurrentTask("r36010101");
        }}
        label={<h6 className="text-2xl font-serif ">2. React Hooks</h6>}
      ></TreeItem>
      <TreeItem
        nodeId="36010102"
        onClick={() => {
          setCurrentTask("r36010102");
        }}
        label={
          <h6 className="text-2xl font-serif ">
            3. Styling ReactJS ComponentsAPI Calls
          </h6>
        }
      ></TreeItem>
      <TreeItem
        nodeId="36010103"
        onClick={() => {
          setCurrentTask("r36010103");
        }}
        label={<h6 className="text-2xl font-serif ">4. Class Components</h6>}
      ></TreeItem>
      <TreeItem
        nodeId="36010104"
        onClick={() => {
          setCurrentTask("r36010104");
        }}
        label={<h6 className="text-2xl font-serif "> 5. Forms</h6>}
      ></TreeItem>{" "}
      <TreeItem
        nodeId="36010105"
        onClick={() => {
          setCurrentTask("r36010105");
        }}
        label={<h6 className="text-2xl font-serif "> 6. State Management</h6>}
      ></TreeItem>
    </TreeItem>
  );

  const intermediateRenderer = () => (
    <TreeView
      aria-label="controlled"
      defaultCollapseIcon={<ExpandMoreIcon />}
      defaultExpandIcon={<ChevronRightIcon />}
      expanded={defaultOpen}
      selected={selectedTaskKey}
      onNodeToggle={handleToggle}
      onNodeSelect={handleSelect}
    >
      <TreeItem
        nodeId="2"
        label={
          <div className="flex flex-row justify-between">
            <h6 className="text-2xl font-serif ">
              2. Intermediate{" "}
              {comI ? (
                <FontAwesomeIcon
                  icon={faCheck}
                  style={{ color: "green", fontSize: "15px" }}
                />
              ) : (
                ""
              )}
            </h6>
            <small
              className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
              onClick={() => alert("Edit button working")}
            >
              Edit
            </small>
          </div>
        }
      >
        <TreeItem
          nodeId="2100"
          onClick={() => {
            setCurrentTask("comEng2");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              1. English {taskComMark("comEng2")}
            </h6>
          }
        >
          <TreeItem
            nodeId="210100"
            onClick={() => {
              setCurrentTask("e210100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Reading {taskComMark("e210100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="210200"
            onClick={() => {
              setCurrentTask("e210200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Listening {taskComMark("e210200")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="210300"
            onClick={() => {
              setCurrentTask("e210300");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Writing {taskComMark("e210300")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="210400"
            onClick={() => {
              setCurrentTask("e210400");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Speaking {taskComMark("e210400")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="2200"
          onClick={() => {
            setCurrentTask("comAgile2");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              2. Agile {taskComMark("comAgile2")}
            </h6>
          }
        >
          <TreeItem
            nodeId="220100"
            onClick={() => {
              setCurrentTask("a220100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Create Issues {taskComMark("a220100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="220200"
            onClick={() => {
              setCurrentTask("a220200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Goals {taskComMark("a220200")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="2300"
          onClick={() => {
            setCurrentTask("comGit2");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              3. Git {taskComMark("comGit2")}
            </h6>
          }
        >
          <TreeItem
            nodeId="230100"
            onClick={() => {
              setCurrentTask("g230100");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Branches {taskComMark("g230100")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="230200"
            onClick={() => {
              setCurrentTask("g230200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Remote Repositories {taskComMark("g230200")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="230300"
            onClick={() => {
              setCurrentTask("g230300");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                3. Undoing Changes {taskComMark("g230300")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="230400"
            onClick={() => {
              setCurrentTask("g230400");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                4. Advanced Branching {taskComMark("g230400")}
              </h6>
            }
          ></TreeItem>
          <TreeItem
            nodeId="230500"
            onClick={() => {
              setCurrentTask("g230500");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                5. Test {taskComMark("g230500")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="2400"
          onClick={() => {
            setCurrentTask("t240100");
          }}
          label={
            <h6 className="text-2xl font-serif ">
              4. Track {taskComMark("t240100")}
            </h6>
          }
        >
          <TreeItem
            nodeId="240100"
            onClick={() => {
              setCurrentTask("track");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                1. Choose {taskComMark("t240100")}
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="2500"
          label={<h6 className="text-2xl font-serif ">5. Programming</h6>}
        >
          {programLang === "py" ? (
            <TreeItem
              nodeId="250200"
              label={<h6 className="text-2xl font-serif ">1. Python</h6>}
            >
              <TreeItem
                nodeId="250201"
                onClick={() => {
                  setCurrentTask("py250201");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. Control Flow and Conditional Statements
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250202"
                onClick={() => {
                  setCurrentTask("py250202");
                }}
                label={<h6 className="text-2xl font-serif ">2. For Loops</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250203"
                onClick={() => {
                  setCurrentTask("py250203");
                }}
                label={<h6 className="text-2xl font-serif ">3. While Loops</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250204"
                onClick={() => {
                  setCurrentTask("py250204");
                }}
                label={<h6 className="text-2xl font-serif ">4. Functions</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250205"
                onClick={() => {
                  setCurrentTask("py250205");
                }}
                label={
                  <h6 className="text-2xl font-serif ">5. List Methods</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250206"
                onClick={() => {
                  setCurrentTask("py250206");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    6. Dictionary Methods
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250207"
                onClick={() => {
                  setCurrentTask("py250207");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    7. Exception Handling
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250208"
                onClick={() => {
                  setCurrentTask("py250208");
                }}
                label={
                  <h6 className="text-2xl font-serif ">8. Sets and Tuples</h6>
                }
              ></TreeItem>
            </TreeItem>
          ) : (
            <TreeItem
              nodeId="250100"
              label={<h6 className="text-2xl font-serif ">1. JavaScript</h6>}
            >
              <TreeItem
                nodeId="250101"
                onClick={() => {
                  setCurrentTask("js250101");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. Control Flow and Conditional Statements
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250102"
                onClick={() => {
                  setCurrentTask("js250102");
                }}
                label={<h6 className="text-2xl font-serif ">2. For Loops</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250103"
                onClick={() => {
                  setCurrentTask("js250103");
                }}
                label={<h6 className="text-2xl font-serif ">3. While Loops</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250104"
                onClick={() => {
                  setCurrentTask("js250104");
                }}
                label={<h6 className="text-2xl font-serif ">4. Functions</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="250105"
                onClick={() => {
                  setCurrentTask("js250105");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    5. Exception Handling
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250106"
                onClick={() => {
                  setCurrentTask("js250106");
                }}
                label={
                  <h6 className="text-2xl font-serif ">6. Array Methods</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="250107"
                onClick={() => {
                  setCurrentTask("js250107");
                }}
                label={
                  <h6 className="text-2xl font-serif ">7. Object Methods</h6>
                }
              ></TreeItem>
            </TreeItem>
          )}
        </TreeItem>
        <TreeItem
          nodeId="2600"
          onClick={() => {
            if (!track) {
              alert(
                "You should choose which track you want first from intermediate level."
              );
            }
          }}
          label={
            <h6 className="text-2xl font-serif ">
              6. Choosen Track {track ? `(${track.toUpperCase()})` : ""}
            </h6>
          }
        >
          {track === "frontend" ? (
            <TreeItem
              nodeId="2800"
              label={<h6 className="text-2xl font-serif ">1. Frontend</h6>}
            >
              {ifrontendRenderer()}
            </TreeItem>
          ) : (
            ""
          )}
          {track === "backend" ? (
            <TreeItem
              nodeId="2700"
              label={<h6 className="text-2xl font-serif ">1. Backend</h6>}
            >
              {ibackendRenderer()}
            </TreeItem>
          ) : (
            ""
          )}
          {track === "fullstack" ? (
            <>
              <TreeItem
                nodeId="2700"
                label={<h6 className="text-2xl font-serif ">1. Backend</h6>}
              >
                {ibackendRenderer()}
              </TreeItem>
              <TreeItem
                nodeId="2800"
                label={<h6 className="text-2xl font-serif ">2. Frontend</h6>}
              >
                {ifrontendRenderer()}
              </TreeItem>
            </>
          ) : (
            ""
          )}
        </TreeItem>
      </TreeItem>
    </TreeView>
  );

  const advancedRenderer = () => (
    <TreeView
      aria-label="controlled"
      defaultCollapseIcon={<ExpandMoreIcon />}
      defaultExpandIcon={<ChevronRightIcon />}
      expanded={defaultOpen}
      selected={selectedTaskKey}
      onNodeToggle={handleToggle}
      onNodeSelect={handleSelect}
    >
      <TreeItem
        nodeId="3"
        label={
          <div className="flex flex-row justify-between">
            <h6 className="text-2xl font-serif ">3. Advanced</h6>
            <small
              className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
              onClick={() => alert("Edit button working")}
            >
              Edit
            </small>
          </div>
        }
      >
        <TreeItem
          nodeId="3100"
          label={<h6 className="text-2xl font-serif ">1. English</h6>}
        >
          <TreeItem
            nodeId="310100"
            onClick={() => {
              setCurrentTask("e310100");
            }}
            label={<h6 className="text-2xl font-serif ">1. Reading</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="310200"
            onClick={() => {
              setCurrentTask("e310200");
            }}
            label={<h6 className="text-2xl font-serif ">2. Listening</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="310300"
            onClick={() => {
              setCurrentTask("e310300");
            }}
            label={<h6 className="text-2xl font-serif ">3. Writing</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="310400"
            onClick={() => {
              setCurrentTask("e310400");
            }}
            label={<h6 className="text-2xl font-serif ">4. Speaking</h6>}
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="3200"
          label={<h6 className="text-2xl font-serif ">2. Git</h6>}
        >
          <TreeItem
            nodeId="320100"
            onClick={() => {
              setCurrentTask("g320100");
            }}
            label={<h6 className="text-2xl font-serif ">1. Collaborating</h6>}
          ></TreeItem>
          <TreeItem
            nodeId="320200"
            onClick={() => {
              setCurrentTask("g320200");
            }}
            label={
              <h6 className="text-2xl font-serif ">
                2. Issues and pull requests
              </h6>
            }
          ></TreeItem>
        </TreeItem>
        <TreeItem
          nodeId="3300"
          label={<h6 className="text-2xl font-serif ">3. Programming</h6>}
        >
          {programLang === "py" ? (
            <TreeItem
              nodeId="330200"
              label={<h6 className="text-2xl font-serif ">1. Python</h6>}
            >
              <TreeItem
                nodeId="330201"
                onClick={() => {
                  setCurrentTask("py330201");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. Modules and Packages
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330202"
                onClick={() => {
                  setCurrentTask("py330202");
                }}
                label={
                  <h6 className="text-2xl font-serif ">2. File handling</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330203"
                onClick={() => {
                  setCurrentTask("py330203");
                }}
                label={
                  <h6 className="text-2xl font-serif ">3. Classes and OOPS</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330204"
                onClick={() => {
                  setCurrentTask("py330204");
                }}
                label={<h6 className="text-2xl font-serif ">4. Debugging</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="330205"
                onClick={() => {
                  setCurrentTask("py330205");
                }}
                label={<h6 className="text-2xl font-serif ">5. Decorators</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="330206"
                onClick={() => {
                  setCurrentTask("py330206");
                }}
                label={<h6 className="text-2xl font-serif ">6. Generators</h6>}
              ></TreeItem>
              <TreeItem
                nodeId="330207"
                onClick={() => {
                  setCurrentTask("py330207");
                }}
                label={
                  <h6 className="text-2xl font-serif ">7. Other concepts</h6>
                }
              ></TreeItem>
            </TreeItem>
          ) : (
            <TreeItem
              nodeId="330100"
              label={<h6 className="text-2xl font-serif ">1. JavaScript</h6>}
            >
              <TreeItem
                nodeId="330101"
                onClick={() => {
                  setCurrentTask("js330101");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    1. Classes and object-oriented programming
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330102"
                onClick={() => {
                  setCurrentTask("js330102");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    2. Prototypes and inheritance
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330103"
                onClick={() => {
                  setCurrentTask("js330103");
                }}
                label={
                  <h6 className="text-2xl font-serif ">3. DOM manipulation</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330104"
                onClick={() => {
                  setCurrentTask("js330104");
                }}
                label={
                  <h6 className="text-2xl font-serif ">
                    4. Asynchronous JavaScript
                  </h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330105"
                onClick={() => {
                  setCurrentTask("js330105");
                }}
                label={
                  <h6 className="text-2xl font-serif ">5. Other Concepts</h6>
                }
              ></TreeItem>
              <TreeItem
                nodeId="330106"
                onClick={() => {
                  setCurrentTask("js330106");
                }}
                label={<h6 className="text-2xl font-serif ">6. Closures</h6>}
              ></TreeItem>
            </TreeItem>
          )}
        </TreeItem>
        <TreeItem
          nodeId="3400"
          onClick={() => {
            if (!track) {
              alert(
                "You should choose which track you want first from intermediate level."
              );
            }
          }}
          label={
            <h6 className="text-2xl font-serif ">
              4. Choosen Track {track ? `(${track.toUpperCase()})` : ""}
            </h6>
          }
        >
          {track === "frontend" ? (
            <TreeItem
              nodeId="3600"
              label={<h6 className="text-2xl font-serif ">1. Frontend</h6>}
            >
              {afrontendRenderer()}
            </TreeItem>
          ) : (
            ""
          )}
          {track === "backend" ? (
            <TreeItem
              nodeId="3500"
              label={<h6 className="text-2xl font-serif ">1. Backend</h6>}
            >
              {abackendRenderer()}
            </TreeItem>
          ) : (
            ""
          )}
          {track === "fullstack" ? (
            <>
              <TreeItem
                nodeId="3500"
                label={<h6 className="text-2xl font-serif ">1. Backend</h6>}
              >
                {abackendRenderer()}
              </TreeItem>
              <TreeItem
                nodeId="3600"
                label={<h6 className="text-2xl font-serif ">2. Frontend</h6>}
              >
                {afrontendRenderer()}
              </TreeItem>
            </>
          ) : (
            ""
          )}
        </TreeItem>
      </TreeItem>
    </TreeView>
  );


    const roadmapNodejs = () => {
    <ol className="font-serif">
      {programLang === "py" ? (
        <li className="font-serif m-0 p-0">
          Python Roadmap ({" "}
          <a
            href="https://roadmap.sh/python"
            className="text-orange-700 hover:text-blue-500 underline font-serif"
            target="_blank"
            rel="noopener noreferrer"
          >
            Go to site
          </a>{" "}
          ){" "}
        </li>
      ) : programLang === "js" ? (
        <li className="font-serif m-0 p-0">
          JavaScript Roadmap ({" "}
          <a
            href="https://roadmap.sh/javascript"
            className="text-orange-700  hover:text-blue-500 underline font-serif"
            target="_blank"
            rel="noopener noreferrer"
          >
            Go to site
          </a>{" "}
          )
        </li>
      ) : (
        ""
      )}
      {track === "frontend" || track === "fullstack" ? (
        <>
          <li className="font-serif m-0 p-0">
            Frontend Roadmap ({" "}
            <a
              href="https://roadmap.sh/frontend"
              className="text-orange-700 hover:text-blue-500 underline font-serif"
              target="_blank"
              rel="noopener noreferrer"
            >
              Go to site
            </a>{" "}
            ){" "}
          </li>
          <li className="font-serif m-0 p-0">
            React Roadmap ({" "}
            <a
              href="https://roadmap.sh/react"
              className="text-orange-700 hover:text-blue-500 underline font-serif"
              target="_blank"
              rel="noopener noreferrer"
            >
              Go to site
            </a>{" "}
            ){" "}
          </li>
        </>
      ) : (
        ""
      )}
      {track === "backend" || track === "fullstack" ? roadmapNodejs() : ""}
    </ol>;
    if (programLang === "py") {
      return (
        <li className="font-serif m-0 p-0">
          Backend Roadmap ({" "}
          <a
            href="https://roadmap.sh/backend"
            className="text-orange-700 hover:text-blue-500 underline font-serif"
            target="_blank"
            rel="noopener noreferrer"
          >
            Go to site
          </a>{" "}
          ){" "}
        </li>
      );
    } else {
      return (
        <>
          <li className="font-serif m-0 p-0">
            Backend Roadmap ({" "}
            <a
              href="https://roadmap.sh/backend"
              className="text-orange-700 hover:text-blue-500 underline font-serif"
              target="_blank"
              rel="noopener noreferrer"
            >
              Go to site
            </a>{" "}
            ){" "}
          </li>
          <li className="font-serif m-0 p-0">
            NodeJS Roadmap ({" "}
            <a
              href="https://roadmap.sh/nodejs"
              className="text-orange-700 hover:text-blue-500 underline font-serif"
              target="_blank"
              rel="noopener noreferrer"
            >
              Go to site
            </a>{" "}
            ){" "}
          </li>
        </>
      );
    }
  };

  // const talentFccInfo = async () => {
  //   await axios
  //     .get(`${process.env.REACT_APP_BACKEND_API}/talent/freecodecamp/data`, {
  //       headers: {
  //         "Content-Type": "application/json",
  //         Authorization: accessToken,
  //       },
  //     })
  //     .then((response) => {
  //       setLevel(response.data.level);
  //       setXp(response.data.xp);
  //       setXpNext(response.data.xpNext);
  //       setTargetXp(response.data.targetXp);
  //       setSuccess(true);
  //     })
  //     .catch((res) => {
  //       if (res.response.status === 401) {
  //         localStorage.clear();
  //         window.location.href = "/";
  //       } else {
  //         window.location.href = "/";
  //       }
  //     });
  // };

  const progressInfo = async () => {
    await axios
      .get(`${process.env.REACT_APP_BACKEND_API}/talent/progress`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: accessToken,
        },
      })
      .then((progress) => {
        console.log(progress.data);
        setComEng1(progress.data.comEng1);
        // setComAgile(progress.data.comAgile);
        // setComGit(progress.data.comGit);
        // setComChoice(progress.data.comChoice);
        setDefaultOpen(progress.data.defaultOpen);
        setSelectedTaskKey(progress.data.selectedTaskKey);
        setCompletedTask(progress.data.completedTask);
        setCurrentTask(progress.data.currentTask);
        setProgramLang(progress.data.programLang);
        // setComProgram(progress.data.comProgram);
        setTrack(progress.data.track);
        setComB(progress.data.comB);
        setComI(progress.data.comI);
        setProgressSuccess(true);
      })
      .catch((res) => {
        if (res.response.status === 401) {
          localStorage.clear();
          window.location.href = "/";
        }
      });
  };

  const taskComMark = (taskId) => {
    if (completedTask) {
      if (completedTask.includes(taskId)) {
        return (
          <FontAwesomeIcon
            icon={faCheck}
            style={{ color: "green", fontSize: "15px" }}
          />
        );
      }
    }
  };




    const submitButton = () => {
    if (completedTask) {
      if (completedTask.includes(currentTask) === true) {
        return (
          <h4>
            <FontAwesomeIcon
              icon={faCheck}
              style={{
                color: "green",
                fontSize: "15px",
              }}
            />{" "}
            Completed
          </h4>
        );
      } else {
        if (Object.keys(currentTasks).includes(currentTask)) {
          if (
            selectedTaskKey === "140100" ||
            selectedTaskKey === "140200" ||
            selectedTaskKey === "240100"
          ) {
            return (
              <>
                <div className="flex flex-col items-center">
                  <h6>Select from dropdown and click Done.</h6>
                  <Select
                    labelId="demo-simple-select-label"
                    id="demo-simple-select"
                    value={showSubmit || ""}
                    onChange={(e) => {
                      // console.log(e.target.value);
                      setShowSubmit(e.target.value);
                    }}
                    className="w-48 h-16"
                  >
                    <MenuItem
                      value={
                        currentTask === "courseLang"
                          ? "english"
                          : currentTask === "track"
                          ? "frontend"
                          : currentTask === "programLang"
                          ? "js"
                          : ""
                      }
                    >
                      <pre className="font-serif text-2xl">
                        {currentTask === "courseLang"
                          ? "English"
                          : currentTask === "track"
                          ? "Frontend"
                          : currentTask === "programLang"
                          ? "JavaScript"
                          : ""}
                      </pre>
                    </MenuItem>
                    <MenuItem
                      value={
                        currentTask === "courseLang"
                          ? "hindi"
                          : currentTask === "track"
                          ? "backend"
                          : currentTask === "programLang"
                          ? "py"
                          : ""
                      }
                    >
                      <pre className="font-serif text-2xl">
                        {currentTask === "courseLang"
                          ? "Hindi"
                          : currentTask === "track"
                          ? "Backend"
                          : currentTask === "programLang"
                          ? "Python"
                          : ""}
                      </pre>
                    </MenuItem>
                    <MenuItem
                      value={currentTask === "track" ? "fullstack" : ""}
                    >
                      <pre className="font-serif text-2xl">
                        {currentTask === "track" ? "Full Stack" : ""}
                      </pre>
                    </MenuItem>
                  </Select>
                  <button
                    type="submit"
                    onClick={() => {
                      // console.log("e");
                      handleSubmit();
                    }}
                    className="rounded-md mt-5 ring ring-lime-700 bg-transparent  p-0 w-[4em] text-xlfont-medium text-black
                    shadow-sm hover:bg-lime-700 "
                  >
                    Done
                  </button>
                </div>
              </>
            );
          } else {
            return (
              <>
                <h6>Click Done When Completed.</h6>
                <button
                  type="submit"
                  onClick={() => {
                    handleSubmit();
                    setShowSubmit(true);
                  }}
                  className="rounded-md  mt-5 ring ring-lime-700 bg-transparent font-medium  p-0 w-[4em] text-xl text-black shadow-sm hover:bg-lime-700 "
                >
                  Done
                </button>
              </>
            );
          }
        }
      }
    }
  };


    // const handleSubmit = async () => {
  //   let values = {};
  //   values[currentTask] = showSubmit || true;
  //   await axios
  //     .post(`${process.env.REACT_APP_BACKEND_API}/talent/progress`, values, {
  //       headers: {
  //         "Content-Type": "application/json",
  //         Authorization: accessToken,
  //       },
  //     })
  //     .then((res) => {
  //       toast.success(res.data.message);
  //       setShowSubmit(false);
  //       setProgressSuccess(false);
  //     })
  //     .catch((res) => console.log(res.response.data));
  // };



  // React.useEffect(() => {
  //   getTalents();
  // // eslint-disable-next-line react-hooks/exhaustive-deps
  // }, []);

  const addSkills = async () => {
    await axios
      .post(`${process.env.REACT_APP_BACKEND_API}/talent/get/talents/`)
      .then((talentData) => {
        setTalents(talentData.data);
        setTalentName("All Talents");
        setTalentId(2023);
      })
      .catch((err) =>
        err.response.status === 401
          ? setNotAuthorised(true)
          : toast.error(err.response.data.message)
      );
  };

  const reloadFunc = () => {
    return (
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <ReactLoading type="cylon" color="#000" height={100} width={50} />
      </div>
    );
  };

  // const currentTips = () => {
  //   return (
  //     <>
  //       <small className="font-serif text-2xl">Tips: </small>
  //       <ol>
  //         {tips[currentTaskNodeIds]?.map((tip, tipIndex) => (
  //           <li className="font-serif text-left p-0 m-0" key={tipIndex}>
  //             <div className="flex flex-row font-serif justify-between">
  //               {tip}
  //               <Link
  //                 className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                 onClick={() => {
  //                   setOpenEditTip(true);
  //                   setEditTipIndex(tipIndex);
  //                 }}
  //               >
  //                 Edit
  //               </Link>
  //             </div>
  //           </li>
  //         ))}
  //       </ol>
  //       {editTipRenderer()}
  //     </>
  //   );
  // };

  // const currentResources = () => {
  //   return (
  //     <>
  //       <small className="font-serif text-2xl">Resources: </small>
  //       <ol>
  //         {resources[currentTaskNodeIds]?.map((resource, rIndex) => {
  //           return (
  //             <div
  //               className="flex flex-row font-serif justify-between "
  //               key={rIndex}
  //             >
  //               <li className="font-serif text-left p-0 m-0">
  //                 {resource.name} ({" "}
  //                 <a
  //                   href={resource.link}
  //                   className="text-orange-700 hover:text-blue-500 underline font-serif"
  //                   target="_blank"
  //                   rel="noopener noreferrer"
  //                 >
  //                   Go to site
  //                 </a>{" "}
  //                 )
  //               </li>{" "}
  //               <Link
  //                 className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                 onClick={() => {
  //                   setOpenEditResource(true);
  //                   setEditResourceIndex(rIndex);
  //                 }}
  //               >
  //                 Edit
  //               </Link>
  //               {editResourceRenderer()}
  //             </div>
  //           );
  //         })}
  //       </ol>
  //     </>
  //   );
  // };

  const handleToggle = (event, nodeIds) => {
    setDefaultOpen(nodeIds);
  };

  const handleSelect = (event, nodeIds) => {
    // setSelectedTaskKey(nodeIds);
  };


  // const getLearningPath = async () => {
  //   const talentIdQueryParam = talentId ? talentId : "2023";
  //   await axios
  //     .get(
  //       `${process.env.REACT_APP_BACKEND_API}/talent/get/learning/path/?talentId=${talentIdQueryParam}`
  //     )
  //     .then((pathData) => {
  //       setGrandParentsPaths(pathData.data.paths.grandParents);
  //       setTips(pathData.data.tips);
  //       setResources(pathData.data.resources);
  //     })
  //     .catch((err) =>
  //       err.response.status === 401
  //         ? setNotAuthorised(true)
  //         : toast.error(err.response.data.message)
  //     );
  // };

    // const editPathApiCall = async (event) => {
  //   event.preventDefault();
  //   const data = {
  //     newId: editPathId,
  //     name: editPathName,
  //     index: pathRendererIndex,
  //     talentId: talentId,
  //     whoami: whoami,
  //   };
  //   if (data) {
  //     await axios
  //       .post(
  //         `${process.env.REACT_APP_BACKEND_API}/talent/edit/grand/parent/path/`,
  //         data,
  //         {
  //           headers: {
  //             "Content-Type": "application/json",
  //             Authorization: accessToken,
  //           },
  //         }
  //       )
  //       .then((postDataPath) => {
  //         getLearningPath();
  //         setOpenEditPath(false);
  //         toast.success(postDataPath.data.message);
  //       })
  //       .catch((err) =>
  //         err.response.status === 401
  //           ? setNotAuthorised(true)
  //           : toast.error(err.response.data.message)
  //       );
  //   }
  // };

  // const deleteParentPathApiCall = async () => {
  //   await axios
  //     .get(
  //       `${process.env.REACT_APP_BACKEND_API}/talent/delete/grand/parent/path/?talentId=${talentId}&index=${pathRendererIndex}&whoami=${whoami}`,
  //       {
  //         headers: {
  //           Authorization: accessToken,
  //         },
  //       }
  //     )
  //     .then((deleteDataPath) => {
  //       toast.success(deleteDataPath.data.message);
  //       getLearningPath();
  //       setOpenEditPath(false);
  //     })
  //     .catch((err) => {
  //       return err.response.status === 401
  //         ? setNotAuthorised(true)
  //         : toast.error(err.response.data.message);
  //     });
  // };

  const editParentPathRenderer = () => {
    const editPath =
      whoami === "gp"
        ? grandParentsPaths[pathRendererIndex[0]]
        : whoami === "p"
        ? grandParentsPaths[pathRendererIndex[0]].parents[pathRendererIndex[1]]
        : whoami === "k"
        ? grandParentsPaths[pathRendererIndex[0]].parents[pathRendererIndex[1]]
            .kids[pathRendererIndex[2]]
        : whoami === "gk"
        ? grandParentsPaths[pathRendererIndex[0]].parents[pathRendererIndex[1]]
            .kids[pathRendererIndex[2]].grandKids[pathRendererIndex[3]]
        : "";
    return (
      <Dialog open={openEditPath} onClose={handleClose}>
        <Toaster position="top-center" reverseOrder="false"></Toaster>
        <DialogContent>
          <form id="feedbackForm">
            <div className="flex flex-col">
              <label
                htmlFor="first-name"
                className=" text-xl m-0 text-left font-medium text-black"
              >
                Id:
              </label>
              <input
                type="text"
                id="first-name"
                defaultValue={editPath ? editPath.nodeId : ""}
                autoComplete="given-name"
                onChange={(e) => {
                  setEditPathId(e.target.value);
                }}
                className="text-xl font-serif block w-[30em] h-10 rounded-md "
                style={{
                  backgroundColor: "rgb(107, 114, 128)",
                  color: "black",
                }}
              ></input>
            </div>
            <div className="flex flex-col">
              <label
                htmlFor="first-name"
                className=" text-xl m-0 text-left font-medium text-black"
              >
                Name:
              </label>
              <input
                type="text"
                id="first-name"
                onChange={(e) => {
                  setEditPathName(e.target.value);
                }}
                defaultValue={editPath ? editPath.name : ""}
                autoComplete="given-name"
                className="text-xl font-serif block w-[30em] h-10 rounded-md "
                style={{
                  backgroundColor: "rgb(107, 114, 128)",
                  color: "black",
                }}
              ></input>
            </div>
            <div className="flex flex-row justify-evenly">
              <Link
                className="text-sky-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
                onClick={() => {
                  setOpenEditPath(false);
                }}
              >
                Cancel
              </Link>
              <button
                type="submit"
                className="text-green-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
                onClick={(e) => {
                  setOpenEditPath(false);
                  // editPathApiCall(e);
                }}
              >
                Submit
              </button>
              <Link
                className="text-red-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
                onClick={() => {
                  // deleteParentPathApiCall();
                }}
              >
                Delete
              </Link>
            </div>
          </form>
        </DialogContent>
      </Dialog>
    );
  };

  const editState = (index, who) => {
    setEditPathId(null);
    setEditPathName(null);
    setOpenEditPath(true);
    setPathRendererIndex(index);
    setWhoami(who);
  };

  // const learningPathRenderer = () => {
  //   let indexList = [];
  //   if (grandParentsPaths) {
  //     return (
  //       <TreeView
  //         aria-label="controlled"
  //         defaultCollapseIcon={<ExpandMoreIcon />}
  //         defaultExpandIcon={<ChevronRightIcon />}
  //         expanded={defaultOpen}
  //         // selected={currentTaskNodeIds}
  //         onNodeToggle={handleToggle}
  //         onNodeSelect={handleSelect}
  //       >
  //         {grandParentsPaths?.map((grandParentsPath, gpIndex) => (
  //           <TreeItem
  //             nodeId={`${grandParentsPath.nodeId}`}
  //             key={grandParentsPath.nodeId}
  //             onClick={() => {
  //               setCurrentTaskNodeIds(`${grandParentsPath.nodeId}`);
  //               setCurrentTaskName(`${grandParentsPath.name}`);
  //             }}
  //             label={
  //               <div className="flex flex-row justify-between">
  //                 <h6 className="text-2xl font-serif ">{`${grandParentsPath.nodeId}. ${grandParentsPath.name}`}</h6>
  //                 <small
  //                   className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                   onClick={() => {
  //                     indexList.push(gpIndex);
  //                     editState(indexList, "gp");
  //                   }}
  //                 >
  //                   Edit
  //                 </small>
  //               </div>
  //             }
  //           >
  //             <TreeItem
  //               nodeId={`0${grandParentsPath.nodeId}`}
  //               onClick={() => {
  //                 setCurrentTaskName(``);
  //                 setCurrentTaskNodeIds(``);
  //               }}
  //               label={
  //                 <small
  //                   className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                   onClick={() => {
  //                     setPathRendererIndex([gpIndex]);
  //                     setOpenAddParentPath(true);
  //                     setWhoami("p");
  //                     setShowPathTag(true);
  //                   }}
  //                 >
  //                   Add
  //                 </small>
  //               }
  //             ></TreeItem>
  //             {grandParentsPath?.parents?.map((parent, pIndex) => (
  //               <TreeItem
  //                 nodeId={`${grandParentsPath.nodeId}00${parent.nodeId}00`}
  //                 onClick={() => {
  //                   setCurrentTaskNodeIds(
  //                     `${grandParentsPath.nodeId}00${parent.nodeId}00`
  //                   );
  //                   setCurrentTaskName(`${parent.name}`);
  //                 }}
  //                 key={`${grandParentsPath.nodeId}00${parent.nodeId}00`}
  //                 label={
  //                   <div className="flex flex-row justify-between">
  //                     <h6 className="text-2xl font-serif ">{`${parent.nodeId}. ${parent.name}`}</h6>
  //                     <small
  //                       className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                       onClick={() => {
  //                         indexList.push(gpIndex, pIndex);
  //                         editState(indexList, "p");
  //                       }}
  //                     >
  //                       Edit
  //                     </small>
  //                   </div>
  //                 }
  //               >
  //                 <TreeItem
  //                   nodeId={`00${grandParentsPath.nodeId}00${parent.nodeId}`}
  //                   onClick={() => {
  //                     setCurrentTaskName(``);
  //                     setCurrentTaskNodeIds(``);
  //                   }}
  //                   label={
  //                     <small
  //                       className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                       onClick={() => {
  //                         setPathRendererIndex([gpIndex, pIndex]);
  //                         setOpenAddParentPath(true);
  //                         setWhoami("k");
  //                         setShowPathTag(true);
  //                       }}
  //                     >
  //                       Add
  //                     </small>
  //                   }
  //                 ></TreeItem>
  //                 {parent?.kids
  //                   ? parent?.kids?.map((kid, kIndex) => {
  //                       // console.log(kid);
  //                       return (
  //                         <TreeItem
  //                           nodeId={`${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00`}
  //                           onClick={() => {
  //                             setCurrentTaskNodeIds(
  //                               `${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00`
  //                             );
  //                             setCurrentTaskName(`${kid.name}`);
  //                           }}
  //                           key={`${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00`}
  //                           label={
  //                             <div className="flex flex-row justify-between">
  //                               <h6 className="text-2xl font-serif ">{`${kid.nodeId}. ${kid.name}`}</h6>
  //                               <small
  //                                 className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                                 onClick={() => {
  //                                   indexList.push(gpIndex, pIndex, kIndex);
  //                                   editState(indexList, "k");
  //                                 }}
  //                               >
  //                                 Edit
  //                               </small>
  //                             </div>
  //                           }
  //                         >
  //                           <TreeItem
  //                             nodeId={`000${grandParentsPath.nodeId}00${parent.nodeId}000${kid.nodeId}`}
  //                             onClick={() => {
  //                               setCurrentTaskName(``);
  //                               setCurrentTaskNodeIds(``);
  //                             }}
  //                             label={
  //                               <small
  //                                 className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                                 onClick={() => {
  //                                   setPathRendererIndex([
  //                                     gpIndex,
  //                                     pIndex,
  //                                     kIndex,
  //                                   ]);
  //                                   setOpenAddParentPath(true);
  //                                   setWhoami("gk");
  //                                   setShowPathTag(true);
  //                                 }}
  //                               >
  //                                 Add
  //                               </small>
  //                             }
  //                           ></TreeItem>
  //                           {kid?.grandKids?.map((grandKid, gkIndex) => (
  //                             <TreeItem
  //                               nodeId={`${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00${grandKid.nodeId}`}
  //                               onClick={() => {
  //                                 setCurrentTaskNodeIds(
  //                                   `${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00${grandKid.nodeId}`
  //                                 );
  //                                 setCurrentTaskName(`${grandKid.name}`);
  //                               }}
  //                               key={`${grandParentsPath.nodeId}00${parent.nodeId}00${kid.nodeId}00${grandKid.nodeId}`}
  //                               label={
  //                                 <div className="flex flex-row justify-between">
  //                                   <h6 className="text-2xl font-serif ">{`${grandKid.nodeId}. ${grandKid.name}`}</h6>
  //                                   <small
  //                                     className="text-2xl text-sky-600 font-serif text-center hover:text-orange-600 underline"
  //                                     onClick={() => {
  //                                       indexList.push(
  //                                         gpIndex,
  //                                         pIndex,
  //                                         kIndex,
  //                                         gkIndex
  //                                       );
  //                                       editState(indexList, "gk");
  //                                     }}
  //                                   >
  //                                     Edit
  //                                   </small>
  //                                 </div>
  //                               }
  //                             ></TreeItem>
  //                           ))}
  //                         </TreeItem>
  //                       );
  //                     })
  //                   : ""}
  //               </TreeItem>
  //             ))}

  //             {openEditPath ? editParentPathRenderer() : ""}
  //           </TreeItem>
  //         ))}
  //       </TreeView>
  //     );
  //   } else {
  //     reloadFunc();
  //   }
  // };

  // const addTipsApiCall = async (event) => {
  //   event.preventDefault();
  //   const data = {
  //     nodeId: currentTaskNodeIds,
  //     talentId: talentId,
  //     message: addTip,
  //   };
  //   if (data) {
  //     await axios
  //       .post(`${process.env.REACT_APP_BACKEND_API}/talent/add/tips/`, data, {
  //         headers: {
  //           "Content-Type": "application/json",
  //           Authorization: accessToken,
  //         },
  //       })
  //       .then((postDataPath) => {
  //         toast.success(postDataPath.data.message);
  //         getLearningPath();
  //         setOpenAddTip(false);
  //       })
  //       .catch((err) =>
  //         err.response.status === 401
  //           ? setNotAuthorised(true)
  //           : toast.error(err.response.data.message)
  //       );
  //   }
  // };

  const addTipRenderer = () => (
    <Dialog open={openAddTip} onClose={handleClose}>
      <Toaster position="top-center" reverseOrder="false"></Toaster>
      <DialogContent>
        <form onSubmit={"addTipsApiCall"} id="feedbackForm">
          <div className="flex flex-col ">
            <label
              htmlFor="first-name"
              className=" text-xl m-0 text-left font-medium text-black"
            >
              Add Instructions (Tips) :
            </label>
            <textarea
              type="text"
              id="first-name"
              autoComplete="given-name"
              onChange={(e) => {
                setAddTip(e.target.value);
              }}
              className="text-xl font-serif block  w-[30em] h-10 rounded-md "
              style={{
                backgroundColor: "rgb(107, 114, 128)",
                color: "black",
              }}
            ></textarea>
          </div>
          <div className="flex flex-row justify-evenly">
            <Link
              className="text-sky-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
              onClick={() => {
                setOpenAddTip(false);
              }}
            >
              Cancel
            </Link>
            <button
              type="submit"
              className="text-green-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
            >
              Submit
            </button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );

  // const editTipsApiCall = async (event) => {
  //   event.preventDefault();
  //   const data = {
  //     nodeId: currentTaskNodeIds,
  //     talentId: talentId,
  //     message: editTip,
  //     index: editTipIndex,
  //   };
  //   if (data) {
  //     await axios
  //       .post(`${process.env.REACT_APP_BACKEND_API}/talent/edit/tips/`, data, {
  //         headers: {
  //           "Content-Type": "application/json",
  //           Authorization: accessToken,
  //         },
  //       })
  //       .then((postDataPath) => {
  //         toast.success(postDataPath.data.message);
  //         getLearningPath();
  //         setOpenEditTip(false);
  //       })
  //       .catch((err) =>
  //         err.response.status === 401
  //           ? setNotAuthorised(true)
  //           : toast.error(err.response.data.message)
  //       );
  //   }
  // };



  // const deleteTipApiCall = async () => {
  //   await axios
  //     .get(
  //       `${process.env.REACT_APP_BACKEND_API}/talent/delete/tips/?nodeId=${currentTaskNodeIds}&talentId=${talentId}&index=${editTipIndex}`,
  //       {
  //         headers: {
  //           Authorization: accessToken,
  //         },
  //       }
  //     )
  //     .then((res) => {
  //       toast.success(res.data.message);
  //       getLearningPath();
  //       setOpenEditTip(false);
  //     })
  //     .catch((err) =>
  //       err.response.status === 401
  //         ? setNotAuthorised(true)
  //         : toast.error(err.response.data.message)
  //     );
  // };

  // const addResourceApi = async (event) => {
  //   event.preventDefault();
  //   const data = {
  //     nodeId: currentTaskNodeIds,
  //     talentId: talentId,
  //     name: addResourceName,
  //     link: addResourceLink,
  //   };

  //   if (data) {
  //     await axios
  //       .post(
  //         `${process.env.REACT_APP_BACKEND_API}/talent/add/resources/`,
  //         data,
  //         {
  //           headers: {
  //             "Content-Type": "application/json",
  //             Authorization: accessToken,
  //           },
  //         }
  //       )
  //       .then((res) => {
  //         toast.success(res.data.message);
  //         getLearningPath();
  //         setOpenAddResource(false);
  //       })
  //       .catch((err) =>
  //         err.response.status === 401
  //           ? setNotAuthorised(true)
  //           : toast.error(err.response.data.message)
  //       );
  //   }
  // };

  // const addResourceRenderer = () => (
  //   <Dialog open={openAddResource} onClose={handleClose}>
  //     <Toaster position="top-center" reverseOrder="false"></Toaster>
  //     <DialogContent>
  //       <form onSubmit={addResourceApi} id="feedbackForm">
  //         <div className="flex flex-col ">
  //           <label
  //             htmlFor="first-name"
  //             className=" text-xl m-0 text-left font-medium text-black"
  //           >
  //             Name :
  //           </label>
  //           <input
  //             type="text"
  //             onChange={(e) => {
  //               setAddResourceName(e.target.value);
  //             }}
  //             className="text-xl font-serif block  w-[30em] h-10 rounded-md "
  //             style={{
  //               backgroundColor: "rgb(107, 114, 128)",
  //               color: "black",
  //             }}
  //           ></input>
  //         </div>
  //         <div className="flex flex-col ">
  //           <label
  //             htmlFor="first-name"
  //             className=" text-xl m-0 text-left font-medium text-black"
  //           >
  //             Link :
  //           </label>
  //           <input
  //             type="text"
  //             onChange={(e) => {
  //               setAddResourceLink(e.target.value);
  //             }}
  //             className="text-xl font-serif block  w-[30em] h-10 rounded-md "
  //             style={{
  //               backgroundColor: "rgb(107, 114, 128)",
  //               color: "black",
  //             }}
  //           ></input>
  //         </div>
  //         <div className="flex flex-row justify-evenly">
  //           <Link
  //             className="text-sky-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
  //             onClick={() => {
  //               setOpenAddResource(false);
  //             }}
  //           >
  //             Cancel
  //           </Link>
  //           <button
  //             type="submit"
  //             className="text-green-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
  //           >
  //             Submit
  //           </button>
  //         </div>
  //       </form>
  //     </DialogContent>
  //   </Dialog>
  // );

  // const editResourceApi = async (event) => {
  //   event.preventDefault();
  //   const data = {
  //     nodeId: currentTaskNodeIds,
  //     talentId: talentId,
  //     name: editResourceName,
  //     link: editResourceLink,
  //     index: editResourceIndex,
  //   };

  //   if (data) {
  //     await axios
  //       .post(
  //         `${process.env.REACT_APP_BACKEND_API}/talent/edit/resources/`,
  //         data,
  //         {
  //           headers: {
  //             "Content-Type": "application/json",
  //             Authorization: accessToken,
  //           },
  //         }
  //       )
  //       .then((res) => {
  //         toast.success(res.data.message);
  //         getLearningPath();
  //         setOpenEditResource(false);
  //       })
  //       .catch((err) =>
  //         err.response.status === 401
  //           ? setNotAuthorised(true)
  //           : toast.error(err.response.data.message)
  //       );
  //   }
  // };

  // const deleteResourceApiCall = async () => {
  //   await axios
  //     .get(
  //       `${process.env.REACT_APP_BACKEND_API}/talent/delete/resources/?nodeId=${currentTaskNodeIds}&talentId=${talentId}&index=${editResourceIndex}`,
  //       {
  //         headers: {
  //           Authorization: accessToken,
  //         },
  //       }
  //     )
  //     .then((res) => {
  //       toast.success(res.data.message);
  //       getLearningPath();
  //       setOpenEditResource(false);
  //     })
  //     .catch((err) =>
  //       err.response.status === 401
  //         ? setNotAuthorised(true)
  //         : toast.error(err.response.data.message)
  //     );
  // };

  // const editResourceRenderer = () => (
  //   <Dialog open={openEditResource} onClose={handleClose}>
  //     <Toaster position="top-center" reverseOrder="false"></Toaster>
  //     <DialogContent>
  //       <form onSubmit={editResourceApi} id="feedbackForm">
  //         <div className="flex flex-col ">
  //           <label
  //             htmlFor="first-name"
  //             className=" text-xl m-0 text-left font-medium text-black"
  //           >
  //             Name :
  //           </label>
  //           <input
  //             type="text"
  //             defaultValue={
  //               Object.keys(resources).includes(currentTaskNodeIds)
  //                 ? resources?.[currentTaskNodeIds]?.[editResourceIndex]?.name
  //                 : ""
  //             }
  //             onChange={(e) => {
  //               setEditResourceName(e.target.value);
  //             }}
  //             className="text-xl font-serif block  w-[30em] h-10 rounded-md "
  //             style={{
  //               backgroundColor: "rgb(107, 114, 128)",
  //               color: "black",
  //             }}
  //           ></input>
  //         </div>
  //         <div className="flex flex-col ">
  //           <label
  //             htmlFor="first-name"
  //             className=" text-xl m-0 text-left font-medium text-black"
  //           >
  //             Link :
  //           </label>
  //           <input
  //             type="text"
  //             defaultValue={
  //               Object.keys(resources).includes(currentTaskNodeIds)
  //                 ? resources?.[currentTaskNodeIds]?.[editResourceIndex]?.link
  //                 : ""
  //             }
  //             onChange={(e) => {
  //               setEditResourceLink(e.target.value);
  //             }}
  //             className="text-xl font-serif block  w-[30em] h-10 rounded-md "
  //             style={{
  //               backgroundColor: "rgb(107, 114, 128)",
  //               color: "black",
  //             }}
  //           ></input>
  //         </div>
  //         <div className="flex flex-row justify-evenly">
  //           <Link
  //             className="text-sky-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
  //             onClick={() => {
  //               setOpenEditResource(false);
  //             }}
  //           >
  //             Cancel
  //           </Link>
  //           <button
  //             type="submit"
  //             className="text-green-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
  //           >
  //             Submit
  //           </button>{" "}
  //           <Link
  //             className="text-red-600 bg-transparent hover:bg-transparent p-0 m-0 font-serif font-medium text-2xl text-right  hover:text-orange-600 underline "
  //             onClick={() => {
  //               deleteResourceApiCall();
  //             }}
  //           >
  //             Delete
  //           </Link>
  //         </div>
  //       </form>
  //     </DialogContent>
  //   </Dialog>
  // );
  const [addTip, setAddTip] = React.useState("");
  const [addResourceLink, setAddResourceLink] = React.useState("");
  const [addResourceName, setAddResourceName] = React.useState("");
  const [editResourceLink, setEditResourceLink] = React.useState("");
  const [editResourceName, setEditResourceName] = React.useState("");
  const [editTip, setEditTip] = React.useState("");
  const [selectTalentPath, setSelectTalentPath] = React.useState(false);
  const [pathRendererIndex, setPathRendererIndex] = React.useState([]);
  const [tips, setTips] = React.useState([]);
  const [resources, setResources] = React.useState([]);
  const [deleteSure, setDeleteSure] = React.useState(false);
  const [whoami, setWhoami] = React.useState();
  const [openAddTip, setOpenAddTip] = React.useState(false);
  const [editTipIndex, setEditTipIndex] = React.useState();
  const [editResourceIndex, setEditResourceIndex] = React.useState();
  const [openEditTip, setOpenEditTip] = React.useState(false);
  const [openEditResource, setOpenEditResource] = React.useState(false);
  const [openAddResource, setOpenAddResource] = React.useState(false);
  const [tags, setTags] = React.useState([]);
  const [selectedTag, setselectedTag] = React.useState();
    const [defaultOpen, setDefaultOpen] = React.useState([]);
  const [currentTaskNodeIds, setCurrentTaskNodeIds] = React.useState();
  const [currentTaskName, setCurrentTaskName] = React.useState();
  const [currentTaskPoints, setCurrentTaskPoints] = React.useState();
  const [grandParentsPaths, setGrandParentsPaths] = React.useState([]);
  const [newPathName, setNewPathName] = React.useState();
  const [openEditPath, setOpenEditPath] = React.useState(false);
  const [openAddParentPath, setOpenAddParentPath] = React.useState(false);
  const [editPathName, setEditPathName] = React.useState();
  const [editPathId, setEditPathId] = React.useState();
  const [showPathTag, setShowPathTag] = React.useState(false);
  // const [talentId, setTalentId] = React.useState("");

  const handleClose = (_, reason) => {
    if (reason && reason === "backdropClick") return;
  };
